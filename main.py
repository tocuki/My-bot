from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext

TOKEN = '7135906610:AAGnlU1P6fun6xVOMTQhcpbj2n-bsnFBtzs'

async def start(update: Update, context: CallbackContext) -> None:
    message = update.message if update.message else update.callback_query.message
    keyboard = [
        [InlineKeyboardButton("üìÇ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", callback_data='repository')],
        [InlineKeyboardButton("üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–±–∞—Ç–∞–º (Beta Test)", callback_data='debate_prep')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def button_handler(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text if update.message else None
    if context.user_data.get('step') == 'creating_folder' and user_input:
        folders = context.bot_data.setdefault('folders', [])
        if user_input in folders:
            await update.message.reply_text("–ü–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        else:
            folders.append(user_input)
            await update.message.reply_text(f'–ü–∞–ø–∫–∞ "{user_input}" —Å–æ–∑–¥–∞–Ω–∞!')
        context.user_data.clear()
        return
    
    query = update.callback_query
    if query:
        await query.answer()
    
        if query.data == 'repository':
            keyboard = [
                [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", callback_data='create_folder')],
                [InlineKeyboardButton("üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É", callback_data='choose_folder')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            await query.message.reply_text("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard))
        elif query.data == 'create_folder':
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:")
            context.user_data['step'] = 'creating_folder'
        elif query.data == 'choose_folder':
            folders = context.bot_data.get('folders', [])
            if not folders:
                await query.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫.")
                return
            keyboard = [[InlineKeyboardButton(folder, callback_data=f'folder_{folder}')]
                        for folder in folders]
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:", reply_markup=InlineKeyboardMarkup(keyboard))
        elif query.data.startswith('folder_'):
            folder_name = query.data[7:]
            keyboard = [
                [InlineKeyboardButton("üìÑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", callback_data=f'view_{folder_name}')],
                [InlineKeyboardButton("‚úè –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f'add_{folder_name}')],
                [InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f'edit_{folder_name}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            await query.message.reply_text(f"–ü–∞–ø–∫–∞: {folder_name}", reply_markup=InlineKeyboardMarkup(keyboard))
        elif query.data.startswith('view_'):
            folder_name = query.data[5:]
            records = context.bot_data.setdefault('records', {}).setdefault(folder_name, [])
            if not records:
                await query.message.reply_text("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")
                return
            await query.message.reply_text("\n".join(records))
        elif query.data.startswith('add_'):
            folder_name = query.data[4:]
            context.user_data['step'] = 'adding_record'
            context.user_data['current_folder'] = folder_name
            await query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É {folder_name}:")
        elif query.data.startswith('edit_'):
            folder_name = query.data[5:]
            records = context.bot_data.get('records', {}).get(folder_name, [])
            if not records:
                await query.message.reply_text("–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return
            keyboard = [[InlineKeyboardButton(record[:30] + "...", callback_data=f'edit_text_{folder_name}_{i}')]
                        for i, record in enumerate(records)]
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
        elif query.data.startswith('edit_text_'):
            parts = query.data.split('_')
            if len(parts) < 4:
                await query.message.reply_text("–û—à–∏–±–∫–∞! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                return
            folder_name = parts[2]
            index = int(parts[3])
            records = context.bot_data.get('records', {}).get(folder_name, [])
            if not records or not (0 <= index < len(records)):
                await query.message.reply_text("–û—à–∏–±–∫–∞! –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            context.user_data['step'] = 'editing_record'
            context.user_data['current_folder'] = folder_name
            context.user_data['record_index'] = index
            await query.message.reply_text(f"–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å: {records[index]}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
        elif query.data == 'back_to_menu':
            await start(update, context)

async def handle_text(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text.strip()
    if context.user_data.get('step') == 'adding_record':
        folder_name = context.user_data.get('current_folder')
        records = context.bot_data.setdefault('records', {}).setdefault(folder_name, [])
        records.append(user_input)
        await update.message.reply_text(f'–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ {folder_name}!')
        context.user_data.clear()
        return
    if context.user_data.get('step') == 'creating_folder':
        folders = context.bot_data.setdefault('folders', [])
        if user_input in folders:
            await update.message.reply_text("–ü–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        else:
            folders.append(user_input)
            await update.message.reply_text(f'–ü–∞–ø–∫–∞ "{user_input}" —Å–æ–∑–¥–∞–Ω–∞!')
        context.user_data.clear()
        return
    user_input = update.message.text.strip()
    if context.user_data.get('step') == 'editing_record':
        folder_name = context.user_data.get('current_folder')
        index = context.user_data.get('record_index')
        records = context.bot_data.setdefault('records', {}).setdefault(folder_name, [])
        if 0 <= index < len(records):
            records[index] = user_input
            await update.message.reply_text(f'–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {folder_name}!')
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞! –ò–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π.")
        context.user_data.clear()

def main() -> None:
    app = Application.builder().token(TOKEN).build()
    dp = app
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == '__main__':
    main()
